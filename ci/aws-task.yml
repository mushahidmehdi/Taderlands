.aws:
  stage: deploy
  image: registry.gitlab.com/paratica/common/cloud-cli:latest
  variables:
    DOCKER_AUTH_CONFIG: $DOCKER_AUTH_CONFIG_DEPLOY
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_DRIVER: overlay2
  cache:
    <<: *cache
    policy: pull
  services:
    - docker:19.03.8-dind
  script:
    - if [ -f "$SERVICE_BASE_PATH/src/build.env" ]; then export $(grep -v '^#' $SERVICE_BASE_PATH/src/build.env | xargs); fi
    - if [ -f "$SERVICE_BASE_PATH/service.json" ]; then export VERSION=$(sed -nre 's/.*version.*"([0-9.]*)".*/\1/p' $SERVICE_BASE_PATH/service.json); fi
    - |
      if [ "$CI_COMMIT_BRANCH" == "master" ]; then 
        export ENV=production
        export RULE_NAME=${SERVICE_NAME}-${ENV}
      else 
        export ENV=staging
        export VERSION=staging
        export RULE_NAME=${SERVICE_NAME}-${ENV}
      fi
    - |
      ENV_FILE=$CI_PROJECT_DIR/build/.env.$ENV
      if [ -f "$ENV_FILE" ]; then
        export $(grep -v '^#' $ENV_FILE | xargs);
      fi
    - echo "Deploying $SERVICE_NAME:$VERSION to $CLUSTER_NAME..."
    - ecs-cli configure profile --profile-name ecs-deploy --access-key ${AWS_ACCESS_KEY_ID} --secret-key ${AWS_SECRET_ACCESS_KEY}
    - ecs-cli configure profile default --profile-name ecs-deploy
    - >
      ecs-cli configure
      --cluster ${CLUSTER_NAME}
      --default-launch-type EC2
      --region ${AWS_REGION}
      --config-name ${CLUSTER_NAME}
    - eval export VERSION_${SERVICE_NAME//-/_}=$VERSION 
    - cd $CI_PROJECT_DIR/$SERVICE_BASE_PATH/config
    - export AWS_ENV=$ENV
    - TASK_FAMILY=${CLUSTER_NAME}-${SERVICE_NAME}
    - ENV_COMPOSE=
    - if [ -f "docker-compose.$ENV.yml" ]; then ENV_COMPOSE="--file docker-compose.$ENV.yml"; fi
    - >
      eval "ecs-cli compose 
      --project-name \"${TASK_FAMILY}\"
      --ecs-params ecs-params.yml
      --file docker-compose.yml
      --file docker-compose.aws.yml
      $ENV_COMPOSE
      create 
      --create-log-groups --cluster-config ${CLUSTER_NAME}"
    - TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition $TASK_FAMILY | jq -r ".taskDefinition.taskDefinitionArn")
    - >
      TARGETS=$({ aws events list-targets-by-rule --rule "${RULE_NAME}" || exit 0; } | 
      jq -r ".Targets" | 
      jq -r ".[0].EcsParameters.TaskDefinitionArn = \"${TASK_DEFINITION}\"")
    - TARGETS=${TARGETS//$'\n'/}
    - aws events put-targets --rule "${RULE_NAME}" --targets "$TARGETS" > /dev/null
  rules:
    - changes:
      - $SERVICE_BASE_PATH/config/*
    - changes: *build-rule
